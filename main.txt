"""
SPIKE 3 Python Code for FIRST LEGO League Team 'Aga Miks?'

This program controls the Agamiksmasin 2.0 for the FLL 2024-2025 SUBMERGED season.
Features:
    - Proportional-integral-derivative (PID) controlled drive function
    - Proportional-integral-derivative (PID) controlled turn function
    - Color-based autonomous mission selection
    - Inertia compensation (robot adaptive version in works)

Instagram: @agamiksfll
"""

from hub import motion_sensor, port, button, light_matrix, light, sound
import motor, runloop, motor_pair, color_sensor, color, time

motor_pair.pair(motor_pair.PAIR_1, port.C,port.D) # Pairs motors

MIN_TURN = 100

wheel = 15.5 #cm (wheel circumference)

def difference(difference): # Calculates shortest way to wanted angle
    while difference > 180:
        difference -= 360
    while difference < -180:
        difference += 360
    return difference

def yaw(): # returns yaw angle in same format as app
    return round(motion_sensor.tilt_angles()[0]*-0.1)

def relative(): # returns average relative travelled distance of both motors
    relative = int(((abs(motor.relative_position(port.C)))+(abs(motor.relative_position(port.D))))/2)
    return relative

# Proportional Integral forward drive function
async def drive(cm, angle, maxspeed = 1110, minspeed = 200, inertia = 65): # takes inputs: distance (cm), direction (from -180 to 180) and optional speedcap
    motor.reset_relative_position(port.C, 0) #resets motors for distance measuring
    motor.reset_relative_position(port.D, 0)
    reverse = cm < 0
    if abs(cm) < 15: maxspeed = 850 # limited speed for short distances to improve distance accuracy
    distance = int(abs(cm) / wheel * 360)-round(maxspeed/inertia) # converts distance in centimeters to motor degrees and deducts predicted inertia
    Kp, Ki, Kd = 4.5, 0.001, 1.2
    I, last = 0, 0 
    while abs(relative()) < distance: # drives until distance reached
        curyaw = yaw()
        togo = distance - abs(relative())
        error = (difference(angle - curyaw)) # calculates difference between wished and current angle
        I += error
        D = error - last
        last = error
        # calculate correction using PID controller
        if reverse:
            correction = round((error * Kp + I * Ki + D * Kd)/3)
            correction = max(-40, min(correction, 40))# smaller range for reverse because of heavy robot
            steering = -correction # invert correction for reverse
        else:
            correction = round((error * Kp + I * Ki + D * Kd)/3)
            correction = max(-80, min(correction, 80))
            steering = correction
        speed = min(max(int(maxspeed*togo/distance*2), minspeed), maxspeed) # proportional speed to distance to combat the chonky robot's inertia
        motor_pair.move(motor_pair.PAIR_1, steering, velocity=speed if not reverse else -speed, acceleration = 900) # corrects the run according to calculations
    motor_pair.stop(motor_pair.PAIR_1, stop = motor.SMART_BRAKE)
    time.sleep_ms(25)

# Proportional–integral–derivative controlled turn function
async def turn(angle, maxspeed = 1110, temper = 1.0):
    Kp, Ki, Kd = 4.5*temper, 0.001*temper, 1.2*temper # PID constants for turning, temper as a gain for heavy attachments
    P, I, D, last = 0, 0 , 0, 0
    delay = 5
    while abs(yaw() - angle) > 1:
        curyaw = yaw()
        P = difference(angle - curyaw) # calculates difference between wished and current angle for proportional correction
        I += P*delay
        D = (P - last)/delay
        if P * last < 0: # reset integral if error changes sign (to prevent windup)
            I = 0
        speed = max(MIN_TURN, min(maxspeed, round(abs(P*Kp) + I*Ki + D*Kd))) # PID controlled turning speed for extremely precise turns
        if P > 0: # if degrees are negative, turns left; if degrees positive, turns right
            motor_pair.move_tank(motor_pair.PAIR_1, speed, -round(speed*0.888)) # hub is offset from the axle, so the inner wheel is slowed down to avoid arc turning
        else:
            motor_pair.move_tank(motor_pair.PAIR_1, -round(speed*0.888), speed)
        last = P
        time.sleep_ms(delay)
    motor_pair.stop(motor_pair.PAIR_1, stop = motor.SMART_BRAKE)
    time.sleep_ms(50)

async def bluerun():
    motion_sensor.reset_yaw(0)
    time.sleep_ms(250)
    await drive(34, 0)
    await motor.run_for_degrees(port.E, -400, 1050)
    await drive(-25, 0)

async def redrun():
    motion_sensor.reset_yaw(0)
    time.sleep_ms(250)
    await drive(10, 0)
    await turn(-40)
    await drive(25, -40)
    await turn(0)
    await drive(24, 0)
    await turn(-45)
    await drive(12, -45)
    await motor.run_for_degrees(port.E, 500, 1050)
    await drive(-15, -45, 100)
    await turn(-10)
    await drive(-65, -10)

async def yellowrun():
    motion_sensor.reset_yaw(0)
    time.sleep_ms(250)
    await drive(59.5, 0) # Drive out of base
    await turn(90) # Turn to mission "Raise the mast"
    await drive(8, 90, 300) # Raise the mast
    motor.run_for_degrees(port.F, 300, -600) # Lower arm to collect krill
    await drive(10, 90, 200) # Get kraken's treasure
    time.sleep_ms(250)
    await drive(-10, 90, 400) # Drive out of the kraken, hopefully we have the treasure and the mast is raised
    await turn(180) # Turn backwards towards the coral nursey to put scuba diver on stick and flip the corals
    await motor.run_for_degrees(port.F, 300, 1000) # Raise the arm that collected the krill, krill should be in base
    await drive(-48, 180) # Drive backwards toward coral nursery
    await motor.run_for_degrees(port.E, 300, -1000 ) # Put away the scuba diver and flip the corals
    await motor.run_for_degrees(port.E, 150, 1000) # Raise the arm that flipped the corals
    await drive(50, -180, 1100, 1100) # Drive back to base
    await drive(40, -150, 1100, 1100)


async def greenrun():
    motion_sensor.reset_yaw(0)
    time.sleep_ms(250)
    await drive(10, 0)
    await turn(45, 900, 0.9)
    await drive(25, 45, 800)
    await turn(0, 900, 0.9)
    await drive(38, 0, 800)
    await turn(-90, 900, 0.9)
    await drive(6, -90, 800)
    await motor.run_for_degrees(port.F, 360, -600, acceleration= 950, deceleration= 950)
    await drive(-12,-90, 800)
    await turn(-155, 900, 0.9)
    await drive(60, -155, 800)

async def magentarun():
    motion_sensor.reset_yaw(0)
    time.sleep_ms(500)
    await drive(15, 0)
    await turn(-25, 1110, 0.9)
    await drive(49, -25, 900)
    await turn(44, 1110, 0.9)
    await drive(19, 44, 800)
    await motor.run_for_degrees(port.F, 500, 1050)
    await turn(45)
    await drive(-18, 45, 900)
    await turn(120, 1110, 0.9)
    await drive(-47, 120, 900)
    await motor.run_for_degrees(port.E, -1200, 1050)
    await drive(-13, 135)
    time.sleep_ms(1000)
    await drive(5, 135)

async def azurerun():
    motion_sensor.reset_yaw(0)
    time.sleep_ms(500)
    motor.run_for_degrees(port.E, 1080, 300, acceleration= 950, deceleration= 950)
    motor.run_for_degrees(port.F, 1080, 300, acceleration= 950, deceleration= 950)
    await turn(50)

async def blackrun():
    motion_sensor.reset_yaw(0)
    motor.reset_relative_position(port.F, 0)
    motor.reset_relative_position(port.E, 0)
    time.sleep_ms(250)
    await drive(13, 0) # Drive to unknown creature and push it then drive back to base
    motor.run_for_degrees(port.F, 700, 1050)
    await turn(-45, 700)
    await drive(32, -45, 1110)#pushing
    await drive(-15, -45)#reverse
    await turn(0, 700)#original direction
    await motor.run_for_degrees(port.F, 400, -1050)
    await drive(32, 0)#to the plankton sample
    motor.run_for_degrees(port.F, 400, 1050)
    await motor.run_for_degrees(port.F, 1300, 1050)
    await motor.run_for_degrees(port.F, 900, -1050)
    await drive(10, 0)
    await turn(-72)
    await motor.run_for_degrees(port.F, 200, 1050)
    await drive(23, -72)
    await turn(-87)
    await drive(41, -87)
    await motor.run_for_degrees(port.F, 200, 1050)
    await turn(-72)
    await drive(5, -72)
    await motor.run_for_degrees(port.F, 500, 1050)
    await drive(4, -72)
    await turn(-90)
    await motor.run_for_degrees(port.F, 800, -1050)
    await drive(35, -90)
    await turn(-140)
    await drive(70, -140, 1110, 800)
    """
    await drive(45, -80)
    await drive(-3, -80)
    motor.run_for_degrees(port.F, 450, 1050)
    await drive(4, -80)
    await motor.run_for_degrees(port.F, 1000, 1050)
    motor.run_for_degrees(port.F, 150, -300)
    await drive(3, -80)
    await turn(-90)
    await drive(25, -90, 700)
    await drive(-0.5, -90)
    await motor.run_for_degrees(port.F, 1100, -1050)
    await drive(23, -90)
    await turn(-145)
    motor.run_for_degrees(port.F, 600, 600)
    await drive(70, -145)"""

async def whiterun():
    motion_sensor.reset_yaw(0)
    time.sleep_ms(250)
    motor.reset_relative_position(port.F, 0)
    motor.reset_relative_position(port.E, 0)
    motor.run_for_degrees(port.F, 100, -400, acceleration= 950, deceleration= 950)
    motor.run_for_degrees(port.E, 250, 1050)
    await drive(92, 0) # Drive the boat to destination
    await motor.run_for_degrees(port.F, 500, 800)
    await motor.run_for_degrees(port.F, 500, -400)
    await motor.run_for_degrees(port.E, 250, -1050)
    motor.run_for_degrees(port.E, 150, -1050)
    await drive(-45, 0)
    await motor.run_for_degrees(port.E, 200, 1050)
    await turn(-45, 1110, 1.2)
    motor.run_for_degrees(port.E, 100, 1050)
    await drive(25, -45)
    await turn(0)
    await drive(60, 0)
    await turn(30)
    await drive(45, 30)

def nupp(): # returns True, when one of the arrow buttons pressed
    return button.pressed(button.LEFT) or button.pressed(button.RIGHT)

async def main():
    #resets the gyro for start
    motion_sensor.reset_yaw(0)
    time.sleep_ms(1000)
    light_matrix.write("?")
    last_color = color.UNKNOWN
    color_runs = { # color database
        color.BLUE: bluerun,
        color.RED: redrun,
        color.GREEN: greenrun,
        color.YELLOW: yellowrun,
        color.AZURE: azurerun,
        color.MAGENTA: magentarun,
        color.BLACK: blackrun,
        color.WHITE: whiterun
    }
    while True:
        current_color = color_sensor.color(port.B)
        # check for color change
        if current_color != last_color:
            last_color = current_color
            if current_color == color.UNKNOWN:
                light.color(light.POWER, color.BLACK)
                light.color(light.CONNECT, color.BLACK)
            else:
                # update lights to corresponding color
                light.color(light.POWER, current_color)
                light.color(light.CONNECT, current_color)

        # start run with button press and tool color detection
        if nupp() and current_color in color_runs:
            sound.beep(440, 300) # beep to know that run has been activated
            await color_runs[current_color]()# trigger the corresponding run

        # handle UNKNOWN color (no attachments on robot)
        if current_color == color.UNKNOWN:
            if abs(difference(0 - motor.absolute_position(port.E))) >= 2 or abs(difference(0 - motor.absolute_position(port.F))) >= 2:
                motor.run_to_absolute_position(port.F, 0, 1050)
                await motor.run_to_absolute_position(port.E, 0, 1050)
            if nupp():
                light_matrix.write(str(hub.temperature()))
                motion_sensor.reset_yaw(0)
                await drive(8, 0, 100, 50)
                await drive(-14, 0)

runloop.run(main())