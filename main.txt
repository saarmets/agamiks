from hub import motion_sensor, port, button, light_matrix, light, sound
import motor, runloop, motor_pair, color_sensor, color, time
#from app import linegraph  # muidu ei tööta bluetoothita

motor_pair.pair(motor_pair.PAIR_1, port.C,port.D) # Pairs motors

#linegraph.clear_all()

# Gyro and wheel motor
motion_sensor.reset_yaw(0)
motor.reset_relative_position(port.C, 0)

MIN_TURN = 100

wheel = 15.5 #cm (wheel circumference)
wheelbase = 10.5 #cm (distance between tires)

def difference(difference): # Calculates shortest way to wanted angle
    while difference > 180:
        difference -= 360
    while difference < -180:
        difference += 360
    return difference

def yaw(): # returns yaw angle
    return int(motion_sensor.tilt_angles()[0]*-0.1)

def relative(): # returns average relative travelled distance of both motors
    relative = int(((abs(motor.relative_position(port.C)))+(abs(motor.relative_position(port.D))))/2)
    return relative

#Gyro forward drive in cm
async def drive(cm, angle, maxspeed = 1110): # takes inputs: distance (cm), direction (from -180 to 180)
    motor.reset_relative_position(port.C, 0) #resets motors for distance measuring
    motor.reset_relative_position(port.D, 0)
    reverse = cm < 0
    if abs(cm) < 15: maxspeed = 600 
    distance = int(abs(cm) / wheel * 360)-round(maxspeed/70) # converts distance in centimeters to motor degrees
    Kp = 8.5
    Ki = 0.005
    I = 0
    while abs(relative()) < distance: # drives until distance reached
        curyaw = yaw()
        togo = distance - abs(relative())
        error = (difference(angle - curyaw)) # calculates difference between wished and current angle
        I += error
        correction = round(error * Kp + I * Ki)
        speed = max(int(maxspeed*togo/distance*2), 200)
        if reverse:
            motor_pair.move_tank(motor_pair.PAIR_1, -speed+correction, -speed-correction, acceleration=980) # corrects the run according to calculations, but drives in reverse
        else:
            motor_pair.move_tank(motor_pair.PAIR_1, speed+correction, speed-correction, acceleration=980) # corrects the run according to calculations
    motor_pair.stop(motor_pair.PAIR_1, stop = motor.SMART_BRAKE)

async def turn(angle, maxspeed = 1110):
    Kp, Ki, Kd = 4.5, 0.001, 1.2
    P, I, D, last = 0, 0 , 0, 0
    delay = 5
    while abs(yaw() - angle) > 1:
        curyaw = yaw()
        P = difference(angle - curyaw)
        I += P*delay
        D = (P - last)/delay
        speed = max(MIN_TURN, min(maxspeed, round(abs(P*Kp) + I*Ki + D*Kd)))
        if P > 0: # if degrees are negative, turns left; if degrees positive, turns right
            motor_pair.move_tank(motor_pair.PAIR_1, speed, -int(speed*1.05))
        else:
            motor_pair.move_tank(motor_pair.PAIR_1, -int(speed*1.05), speed)
        last = P
        time.sleep_ms(delay)        
    motor_pair.stop(motor_pair.PAIR_1, stop = motor.SMART_BRAKE)
    time.sleep_ms(250)

async def bluerun():
    motion_sensor.reset_yaw(0)
    time.sleep_ms(1000)
    await turn(-35)
    await drive(35,-35)
    await turn(5)
    await drive(12, 5)
    await turn(-15)
    await drive(18, -15)
    await turn(-30)
    await turn(-15)
    await drive(-5, -5, 500)
    await turn(20)
    await motor.run_for_degrees(port.F, 320, 1050, deceleration= 950)
    await turn(35)
    await drive(-4, 35, 300)
    motor.run_for_degrees(port.F, 80, 1050, deceleration= 950)
    await turn(50)
    motor.run_for_degrees(port.F, 180, -1050, deceleration= 950)
    await drive(4,55, 400)
    await turn(34)
    await drive(13, 34)
    await drive(-4, 32, 400)
    motor.run_for_degrees(port.F, 180, 1050, deceleration= 950)
    motor.run_for_degrees(port.E, 380, 1050, deceleration= 950)
    await turn(10)
    await drive(-38, 10)
    await turn(135)
    await drive(-30, 135)
    await drive(45, 135)

async def redrun():
    motion_sensor.reset_yaw(0)
    time.sleep_ms(1000)
    await drive(10, 0)
    await turn(-40)
    await drive(30, -40)
    await turn(0)
    await drive(23, 0)
    await turn(-45)
    await drive(13, -45)
    await motor.run_for_degrees(port.E, -300, 1050, deceleration= 950)
    await motor.run_for_degrees(port.E, 300, 1050, deceleration= 950)
    await drive(-20, -45)

async def yellowrun():
    motion_sensor.reset_yaw(0)
    time.sleep_ms(1000)
    motor.run_for_degrees(port.E, 150, 300, acceleration= 950, deceleration= 950)
    await turn(-60)
    await drive(50, -60)
    await turn(0, 300)
    await drive(20, 0, 300)
    await drive(-10, 0)
    await turn(90)
    await drive(-50, 90)
    await motor.run_for_degrees(port.E, -400, 300, acceleration= 950, deceleration= 950)
    await motor.run_for_degrees(port.E, 200, 300, acceleration= 950, deceleration= 950)
    await drive(55, 90)
    await turn(120)
    await drive(40, 120)

async def greenrun():
    motion_sensor.reset_yaw(0)
    time.sleep_ms(1000)
    await turn(45)
    await drive(45, 45)
    await turn(0)
    await drive(28, 0)
    await turn(-90)
    await drive(10, -90)
    await motor.run_for_degrees(port.F, 900, -600, acceleration= 950, deceleration= 950)
    await drive(-10,-90)
    await turn(-155)
    await drive(60, -155)

async def magentarun():
    motion_sensor.reset_yaw(0)
    time.sleep_ms(1000)
    motor.run_for_degrees(port.E, 1080, 300, acceleration= 950, deceleration= 950)
    motor.run_for_degrees(port.F, 1080, 300, acceleration= 950, deceleration= 950)
    await drive(150, 0)
    await drive(-150, 0)

async def azurerun():
    motion_sensor.reset_yaw(0)
    time.sleep_ms(1000)
    motor.run_for_degrees(port.E, 1080, 300, acceleration= 950, deceleration= 950)
    motor.run_for_degrees(port.F, 1080, 300, acceleration= 950, deceleration= 950)
    await turn(50)

async def blackrun():
    motion_sensor.reset_yaw(0)
    motor.reset_relative_position(port.F, 0)
    motor.reset_relative_position(port.E, 0)
    time.sleep_ms(1000)
    motor.run_for_degrees(port.E, 200, -600, acceleration= 950, deceleration= 950)
    await drive(10, 0) # Drive from base
    await turn(35)
    await drive(15, 35) # Drive to crab cage
    await turn(10)
    await drive(10, 10)
    await turn(35)
    await drive(30, 35)
    await turn(-10)
    await turn(45)
    await drive(25, 45)
    await turn(37)
    await drive(5, 37)
    await turn(135) # Turn away from angelrfish and drive to sonar
    await drive(30, 135) # Drive to sonar
    await motor.run_for_degrees(port.F, 700, -600, acceleration= 950, deceleration= 950)
    await drive(-10, 135)
    motor.run_to_relative_position(port.F, 0, -600, acceleration= 950, deceleration= 950)
    #await turn(64)
    #await drive(5, 64)
    #await motor.run_for_degrees(port.E, 150, 600, acceleration= 950, deceleration= 950)
    #await drive(5, 64)
    #await motor.run_for_degrees(port.E, 200, -600, acceleration= 950, deceleration= 950)
    #await drive(-10, 64)
    #await turn(0)
    #await drive(50, 0)
    #await turn(-60)
    #await drive(40, -60) 
     
    
async def whiterun():
    motion_sensor.reset_yaw(0)
    motor.reset_relative_position(port.F, 0)
    motor.reset_relative_position(port.E, 0)
    time.sleep_ms(1000)
    motor.run_to_relative_position(port.F, 50, 300, acceleration= 950, deceleration= 950)
    await drive(25, 0)
    await motor.run_to_relative_position(port.F, 0, 300, acceleration= 950, deceleration= 950)
    await drive(-4, 0)
    motor.run_to_relative_position(port.F, 40, 1050, acceleration= 950, deceleration= 950)
    await drive(-45, 0)
    #await drive(150, 0)
    #await drive(-150, 0)

def nupp(): # returns True, when one of the arrow buttons pressed
    return button.pressed(button.LEFT) or button.pressed(button.RIGHT)

async def main():
    #resets the gyro for start
    motion_sensor.reset_yaw(0)
    time.sleep_ms(1000)
    light_matrix.write("?")
    last_color = color.UNKNOWN
    color_actions = {
        color.BLUE: bluerun,
        color.RED: redrun,
        color.GREEN: greenrun,
        color.YELLOW: yellowrun,
        color.AZURE: azurerun,
        color.MAGENTA: magentarun,
        color.BLACK: blackrun,
        color.WHITE: whiterun# Add other colors as needed
    }
    while True: 
        current_color = color_sensor.color(port.B)
        # Check if color changed
        if current_color != last_color:
            last_color = current_color
            if current_color == color.UNKNOWN:
                light.color(light.POWER, color.BLACK)
                light.color(light.CONNECT, color.BLACK)
            else:
                # Update lights for the detected color
                light.color(light.POWER, current_color)
                light.color(light.CONNECT, current_color)

        # Trigger action if button is pressed and color is detected
        if nupp() and current_color in color_actions:
            sound.beep(440, 300)
            await color_actions[current_color]()# Trigger the corresponding action

        # Handle UNKNOWN color (if needed)
        if current_color == color.UNKNOWN:
            if abs(difference(0 - motor.absolute_position(port.E))) >= 2 or abs(difference(0 - motor.absolute_position(port.F))) >= 2:
                motor.run_to_absolute_position(port.F, 0, 1050)
                await motor.run_to_absolute_position(port.E, 0, 1050)
            if nupp():
                light_matrix.write(str(hub.temperature()))

runloop.run(main())